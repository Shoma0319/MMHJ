#include<stdio.h>
#include<dirent.h>
#include<string.h>
#include<stdlib.h>

struct Document{
    int numberOfURL;
    char name[100];
    char link[10][100];
    double pageScore;
    double wordScore;
    double score;
    char words[10][100];
    int numberOfWords;
};

int cmpfunc(const void *a, const void *b){
    if( (((struct Document*)a)->score < ((struct Document*)b)->score) ){
        return 1;
    } 
    else if( (((struct Document*)a)->score > ((struct Document*)b)->score) ){
        return -1;
    } else {
        return 0;
    }
}

int main(){
    DIR *folder;
    struct dirent *de;
    FILE *fp;
    char *base = "./source/";
    char fullFileName[100];
    int fileNamelength;
    char content[100];
    int fileCount=0;
    struct Document *documents;
    int i=0; //page number
    int j=0; //link number
    int k=0; //word number
    char queries[10][100];
    char input[10000];
    double maxWordScore=-1;
    double maxPageScore=-1;

    //calculate the number of files in teh source directory
    folder = opendir("./source");
    if(folder == NULL) {
        printf("Unable to read directory\n");
        return 1;
    } else {
        while((de = readdir(folder)) != NULL){
            if(de->d_type != 8) continue; //if de->d_type==8, it is file.
            fileCount++;
        }
    }
    closedir(folder);

    documents = (struct Document *)malloc(fileCount*sizeof(struct Document));

    //read the file contents
    folder = opendir("./source");

    if(folder == NULL) {
        printf("Unable to read directory\n");
        return 1;
    }
    else {
        while ((de = readdir(folder)) != NULL) {
            if(de->d_type != 8) continue;

            //initialize documents array
            strcpy(documents[i].name, de->d_name);
            documents[i].numberOfURL = 0;
            documents[i].numberOfWords = 0;
            documents[i].pageScore = 1;
            documents[i].wordScore = 0;

            //create full file name(./source/___)
            fileNamelength = strlen(de->d_name)+1;
            strncpy(fullFileName, base, fileNamelength);
            fullFileName[fileNamelength] = '\0';
            strcat(fullFileName, de->d_name);

            fp = fopen(fullFileName, "r");
            while(1) {
                fscanf(fp, "%s", content);
                if(strstr(content, ".html") != NULL) { 
                    strcpy(documents[i].link[j], content);
                    documents[i].numberOfURL += 1;
                    j++;
                } else {
                    strcpy(documents[i].words[k], content);
                    documents[i].numberOfWords += 1;
                    k++;
                }
                if( feof(fp) ) break;
            }
            fclose(fp);
            i++;
            j = 0;
            k=0;
        }
    }
    closedir(folder);

    //calculate the scores of each file
    for(int i=0; i<20; i++){ //20 times
        for(int j=0; j<fileCount; j++){ //page t
            documents[j].pageScore = 0.15;
            for(int k=0; k<fileCount; k++){ //page s
                for(int l=0; l<documents[k].numberOfURL; l++){  //page s's link
                    if(strcmp(documents[k].link[l], documents[j].name)==0){
                        documents[j].pageScore += 0.85 * (documents[k].pageScore / documents[k].numberOfURL);
                    }
                }
            }
        }
    }

    //project8

    for(int i=0; i<10; i++){
        strcpy(queries[i], " ");
    }

    scanf("%s", queries[0]);
    scanf("%[^\n]s", input);
    sscanf(input, "%s %s %s %s %s %s %s %s %s", queries[1], queries[2], queries[3], queries[4], queries[5], queries[6], queries[7], queries[8], queries[9]);

    for(int i=0; i<10; i++){
        for(int j=0; j<10; j++){
            if(i==j) continue;
            if(strcmp(queries[i], queries[j])==0){
                strcpy(queries[j], " ");
            }
        }
    }

    for(int i=0; i<10; i++){ //queries
        for(int j=0; j<fileCount; j++){ //files
            for(int k=0; k<documents[j].numberOfWords; k++){ //words in files
                if(strcmp(documents[j].words[k], queries[i]) == 0){
                    documents[j].wordScore += 1;
                    break;
                }
            }
        }
    }

    //find max value of pageScore and wordScore
    for(int i=0; i<fileCount; i++){
        if(documents[i].pageScore > maxPageScore) maxPageScore = documents[i].pageScore;
        if(documents[i].wordScore > maxWordScore) maxWordScore = documents[i].wordScore;
    }

    for(int i=0; i<fileCount; i++){
        documents[i].pageScore /= maxPageScore;
        documents[i].wordScore /= maxWordScore;
        documents[i].score = documents[i].pageScore + documents[i].wordScore;
    }  

    qsort(documents, fileCount, sizeof(struct Document), cmpfunc);

    printf("word  page   score\n");
    for(int i=0; i<fileCount; i++){
        printf("%.2lf : %.2lf : %.2lf : %s\n", documents[i].wordScore, documents[i].pageScore, documents[i].score, documents[i].name);
    }

    return 0;
}
